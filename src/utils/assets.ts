import { Assets, AssetsManifest, ProgressCallback } from 'pixi.js';
import { gameState } from './gameState';
import { DEFAULT_LANGUAGE_CODE } from '../config';
import { filterAssets } from './helpers';

/** List of assets grouped in bundles, for dynamic loading */
let assetsManifest: AssetsManifest = { bundles: [] };

/** Store bundles already loaded */
const loadedBundles: string[] = [];

/** Check if a bundle exists in assetManifest  */
function checkBundleExists(bundle: string) {
    return !!assetsManifest.bundles.find((b) => b.name === bundle);
}

/** Load assets bundles that have nott been loaded yet */
export async function loadBundles(bundles: string | string[], callback: ProgressCallback | null = null) {
    if (typeof bundles === 'string') bundles = [bundles];

    // Check bundles requested if they exists
    for (const bundle of bundles) {
        if (!checkBundleExists(bundle)) {
            throw new Error(`[Assets] Invalid bundle: ${bundle}`);
        }
    }

    // Filter out bundles already loaded
    const loadList = bundles.filter((bundle) => !loadedBundles.includes(bundle));

    // Skip if there is no bundle left to be loaded
    if (!loadList.length) return;

    // Load bundles
    // console.log('[Assets] Load:', loadList.join(', '));
    if (callback) await Assets.loadBundle(loadList, callback);
    else await Assets.loadBundle(loadList);

    // Append loaded bundles to the loaded list
    loadedBundles.push(...loadList);
}

/** Check if all bundles are loaded, return false if any of them is not loaded yet  */
export function areBundlesLoaded(bundles: string[]) {
    for (const name of bundles) {
        // Return false if a single bundle is not present in the loaded list
        if (!loadedBundles.includes(name)) {
            return false;
        }
    }

    // All provided bundles are loaded
    return true;
}

/** Load the assets json manifest generated by assetpack */
async function fetchAssetsManifest(url: string) {
    const response = await fetch(url);
    const manifest = await response.json();
    if (!manifest.bundles) {
        throw new Error('[Assets] Invalid assets manifest');
    }
    return manifest;
}

/** Initialise and start background loading of all assets */
export async function initAssets() {
    // Load assets manifest
    assetsManifest = await fetchAssetsManifest('assets/assets-manifest.json');
    assetsManifest = filterAssets(assetsManifest, true);

    // Init PixiJS assets with this asset manifest
    await Assets.init({ manifest: assetsManifest, basePath: 'assets' });

    try {
        await Assets.load(`lang/${gameState.currentState.language}.json`);
    } catch (e) {
        await Assets.load(`lang/${DEFAULT_LANGUAGE_CODE}.json`);
    }

    // Load assets for the load screen
    await loadBundles('preload');
}

/** Load all assets bundles */
export function getAllBundles() {
    // List all existing bundles names
    return assetsManifest.bundles.filter((item) => item.name !== 'default').map((item) => item.name);
}
